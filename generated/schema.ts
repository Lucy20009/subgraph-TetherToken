// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Gravatar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gravatar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gravatar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Gravatar", id.toString(), this);
    }
  }

  static load(id: string): Gravatar | null {
    return changetype<Gravatar | null>(store.get("Gravatar", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operation1(): i32 {
    let value = this.get("operation1");
    return value!.toI32();
  }

  set operation1(value: i32) {
    this.set("operation1", Value.fromI32(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get operation2(): i32 {
    let value = this.get("operation2");
    return value!.toI32();
  }

  set operation2(value: i32) {
    this.set("operation2", Value.fromI32(value));
  }

  get money(): BigInt {
    let value = this.get("money");
    return value!.toBigInt();
  }

  set money(value: BigInt) {
    this.set("money", Value.fromBigInt(value));
  }
}
